"""
模块
定义：
    .py结尾的python文件，包含python对象定义和语句
作用：
    更有逻辑的组织代码，将相关代码分配到一个模块，便于代码易用、易读
    模块可以定义函数、类和变量。也可以包含可执行代码
导入
    import xxx
    from xxx import xxx
    from xxx import *
命名空间和作用域
    变量是拥有匹配对象的名字（标识符）。命名空间是一个包含了变量名称们（键）和它们各自相应的对象们（值）的字典。
    一个 Python 表达式可以访问局部命名空间和全局命名空间里的变量。如果一个局部变量和一个全局变量重名，则局部变量会覆盖全局变量。
    每个函数都有自己的命名空间。类的方法的作用域规则和通常函数的一样。
    Python 会智能地猜测一个变量是局部的还是全局的，它假设任何在函数内赋值的变量都是局部的。
    因此，如果要给函数内的全局变量赋值，必须使用 global 语句。
    global VarName 的表达式会告诉 Python， VarName 是一个全局变量，这样 Python 就不会在局部命名空间里寻找这个变量了。
    例如，我们在全局命名空间里定义一个变量 Money。我们再在函数内给变量 Money 赋值，然后 Python 会假定 Money 是一个局部变量。然而，我们并没有在访问前声明一个局部变量 Money，结果就是会出现一个 UnboundLocalError 的错误。取消 global 语句前的注释符就能解决这个问题。
常用函数
    dir(module_name) 返回列表容纳了一个模块中定义的所有模块、变量和函数
        __name__ 模块名称 __file__ 模块导入的文件名
    globals()和locals()    返回全局和局部命名空间中的名字
        如果在函数内部调用 locals()，返回的是所有能在该函数里访问的命名。
        如果在函数内部调用 globals()，返回的是所有在该函数里能访问的全局名字。
        两个函数的返回类型都是字典。所以名字们能用 keys() 函数摘取
    reload()    模块被导入到一个脚本，顶层部分的代码只会被执行一次，如果想重复执行模块顶层代码，使用reload()重新导入之前导入过的模块
"""
from func_case import test

name = test("jack")
print(name)