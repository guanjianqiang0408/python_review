"""
函数
    组织好的，可重复使用的，实现单一或相关联的功能代码块。
作用
    能提高应用的模块性，减少代码重复利用率，用户创建的函数称为自定义函数（Custom function）
定义函数
    规则：
        def 开头后接函数名和括号
        任何传入参数和自变量必须放在括号内
        函数第一行语句可以选择性使用文档字符串说明函数
        函数内容冒号开始，且缩进
        return [表达式]结束函数，返回一个值，如果不指定返回内容，默认返回None
    语法：
        def func_name(*args, **kwargs):
            '''函数定义'''
            :todo
            return
调用函数
    func_name()
参数传递
    func_name(1, {"age": 20})

    不可变类型：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。
    可变类型：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。

函数参数传递
    不可变类型：类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。
    可变类型：类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响

参数
    必传参数 以正确的顺序传入函数，调用时数量必须和声明时一样
    关键字参数 参数含函数调用紧密，函数调用使用关键字参数确定传入参数值，使用关键字参数允许调用时参数和声明时不一致，因为Python解释器能用参数名匹配参数值
    默认参数 调用函数时，默认参数值如果没有传入，则呗认为是默认值
    不定长参数 函数能处理比当初声明时更多的参数。这些参数叫做不定长参数

匿名函数 lambda
    lambda只是一个表达式，函数体比def简单很多。
    lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。
    lambda函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。
    虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。
    语法:
        lambda [arg1 [,arg2,.....argn]]:expression

return 语句
    return语句[表达式]退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None

变量作用域
    一个程序的所有的变量并不是在哪个位置都可以访问的。访问权限决定于这个变量是在哪里赋值的。
    变量的作用域决定了在哪一部分程序你可以访问哪个特定的变量名称。两种最基本的变量作用域如下：
        全局变量
        局部变量

全局变量和局部变量
    定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。
    局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中
"""


def test(name, age=20, *args, **kwargs):
    """test function"""
    print("test function")
    return name


name = test("tom")
print(name)


sum = lambda a, b: a + b
result = sum(1, 2)
print(result)
