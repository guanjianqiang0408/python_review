"""
Python 序列（Sequence）是指按特定顺序依次排列的一组数据，它们可以占用一块连续的内存，
也可以分散到多块内存中。Python 中的序列类型包括列表（list）、元组（tuple）、字典（dict）和集合（set）
Python 编程中，我们既需要独立的变量来保存一份数据，也需要序列来保存大量数据。

列表（list）和元组（tuple）比较相似，它们都按顺序保存元素，所有的元素占用一块连续的内存，
每个元素都有自己的索引，因此列表和元组的元素都可以通过索引（index）来访问。它们的区别在于：列表是可以修改的，而元组是不可修改的。

字典（dict）和集合（set）存储的数据都是无序的，每份元素占用不同的内存，其中字典元素以 key-value 的形式保存
"""

"""
定义：
所谓序列，指的是一块可存放多个值的连续内存空间，这些值按一定顺序排列，可通过每个值所在位置的编号（称为索引）访问它们。

为了更形象的认识序列，可以将它看做是一家旅店，那么店中的每个房间就如同序列存储数据的一个个内存空间，
每个房间所特有的房间号就相当于索引值。也就是说，通过房间号（索引）我们可以找到这家旅店（序列）中的每个房间（内存空间）。

在 Python 中，序列类型包括字符串、列表、元组、集合和字典，这些序列支持以下几种通用的操作，但比较特殊的是，集合和字典不支持索引、切片、相加和相乘操作

索引：
    序列元素有编号，从0开始

切片
    sname[start : end : step]
    参数含义：
    sname：表示序列的名称；
    start：表示切片的开始索引位置（包括该位置），此参数也可以不指定，会默认为 0，也就是从序列的开头进行切片；
    end：表示切片的结束索引位置（不包括该位置），如果不指定，则默认为序列的长度；
    step：表示在切片过程中，隔几个存储位置（包含当前位置）取一次元素，也就是说，如果 step 的值大于 1，则在进行切片去序列元素时，会“跳跃式”的取元素。如果省略设置 step 的值，则最后一个冒号就可以省略。
序列相加或相乘
    seq1 + seq2
    seq1 * 2

检查元素是否包含在序列中
    value in sequence

序列的内置函数
    len()	计算序列的长度，即返回序列中包含多少个元素。
    max()	找出序列中的最大元素。注意，对序列使用 sum() 函数时，做加和操作的必须都是数字，不能是字符或字符串，否则该函数将抛出异常，因为解释器无法判定是要做连接操作（+ 运算符可以连接两个序列），还是做加和操作。
    min()	找出序列中的最小元素。
    list()	将序列转换为列表。
    str()	将序列转换为字符串。
    sum()	计算元素和。
    sorted()	对元素进行排序。
    reversed()	反向序列中的元素。
    enumerate()	将序列组合为一个索引序列，多用在 for 循环中。
"""
seq1 = [1, 2]
seq2 = [3, 4]
seq3 = seq1 + seq2
print(seq3)
print(seq3 * 2)
print(1 in seq3)
print(max(seq3))
